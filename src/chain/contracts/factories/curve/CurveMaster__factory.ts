/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  CurveMaster,
  CurveMasterInterface,
} from "../../curve/CurveMaster";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "_curves",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "_paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_vaultControllerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_address",
        type: "address",
      },
      {
        internalType: "int256",
        name: "x_value",
        type: "int256",
      },
    ],
    name: "getValueAt",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token_address",
        type: "address",
      },
      {
        internalType: "address",
        name: "curve_address",
        type: "address",
      },
    ],
    name: "setCurve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vault_master_address",
        type: "address",
      },
    ],
    name: "setVaultController",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vaultControllerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600080546001600160a01b031916339081178255604051909182917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506106f8806100616000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806399747f151161006657806399747f151461014a578063ca594e6c1461015d578063d15e1ba914610170578063d661d8ad14610191578063f2fde38b146101a257600080fd5b806329779687146100a357806366f94015146100e9578063715018a61461011c5780638b4f0429146101265780638da5cb5b14610139575b600080fd5b6100cc6100b13660046105f5565b6001602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61010c6100f73660046105f5565b60026020526000908152604090205460ff1681565b60405190151581526020016100e0565b6101246101b5565b005b6003546100cc906001600160a01b031681565b6000546001600160a01b03166100cc565b6101246101583660046105f5565b610232565b61012461016b366004610617565b610288565b61018361017e36600461064a565b61036f565b6040519081526020016100e0565b6003546001600160a01b03166100cc565b6101246101b03660046105f5565b6104fe565b6000546001600160a01b031633146101e85760405162461bcd60e51b81526004016101df90610674565b60405180910390fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b0316331461025c5760405162461bcd60e51b81526004016101df90610674565b600380546001600160a01b039092166001600160a01b0319928316811790915560048054909216179055565b6000546001600160a01b031633146102b25760405162461bcd60e51b81526004016101df90610674565b6004546001600160a01b03161561034157600480546040805163eb0c495560e01b815290516001600160a01b039092169263eb0c49559282820192602092908290030181600087803b15801561030757600080fd5b505af115801561031b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033f91906106a9565b505b6001600160a01b03918216600090815260016020526040902080546001600160a01b03191691909216179055565b6001600160a01b03821660009081526002602052604081205460ff16156103c75760405162461bcd60e51b815260206004820152600c60248201526b18dd5c9d99481c185d5cd95960a21b60448201526064016101df565b6001600160a01b03838116600090815260016020526040902054166104225760405162461bcd60e51b81526020600482015260116024820152701d1bdad95b881b9bdd08195b98589b1959607a1b60448201526064016101df565b6001600160a01b0383811660009081526001602052604080822054905163414be42b60e01b815260048101869052921691829063414be42b9060240160206040518083038186803b15801561047657600080fd5b505afa15801561048a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ae91906106a9565b9050806104f65760405162461bcd60e51b8152602060048201526016602482015275726573756c74206d757374206265206e6f6e7a65726f60501b60448201526064016101df565b949350505050565b6000546001600160a01b031633146105285760405162461bcd60e51b81526004016101df90610674565b6001600160a01b03811661057e5760405162461bcd60e51b815260206004820152601f60248201527f4f776e61626c653a206e6577206f776e6572206973207a65726f20616464720060448201526064016101df565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b80356001600160a01b03811681146105f057600080fd5b919050565b60006020828403121561060757600080fd5b610610826105d9565b9392505050565b6000806040838503121561062a57600080fd5b610633836105d9565b9150610641602084016105d9565b90509250929050565b6000806040838503121561065d57600080fd5b610666836105d9565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6000602082840312156106bb57600080fd5b505191905056fea26469706673582212204c9e3c96d699d650a9f963ef03dae2c686f9cd574947f673b28b45671049be4964736f6c63430008090033";

type CurveMasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CurveMasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CurveMaster__factory extends ContractFactory {
  constructor(...args: CurveMasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<CurveMaster> {
    return super.deploy(overrides || {}) as Promise<CurveMaster>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CurveMaster {
    return super.attach(address) as CurveMaster;
  }
  override connect(signer: Signer): CurveMaster__factory {
    return super.connect(signer) as CurveMaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CurveMasterInterface {
    return new utils.Interface(_abi) as CurveMasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CurveMaster {
    return new Contract(address, _abi, signerOrProvider) as CurveMaster;
  }
}
